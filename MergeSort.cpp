// Merge sort in C++
#include <iostream>
#include <vector>
#include <chrono>
using namespace std::chrono;
using namespace std;

// Merge two subarrays L and M into arr
void merge(int arr[], int p, int q, int r) {
  
  // Create L ← A[p..q] and M ← A[q+1..r]
  int n1 = q - p + 1;
  int n2 = r - q;
  
  // Use std::vector to dynamically allocate arrays
  vector<int> L(n1);
  vector<int> M(n2);
  
  for (int i = 0; i < n1; i++)
    L[i] = arr[p + i];
    
  for (int j = 0; j < n2; j++)
    M[j] = arr[q + 1 + j];
    
  // Maintain current index of sub-arrays and main array
  int i = 0, j = 0, k = p;
  
  // Until we reach either end of either L or M, pick larger among
  // elements L and M and place them in the correct position at A[p..r]
  while (i < n1 && j < n2) {
    if (L[i] <= M[j]) {
      arr[k] = L[i];
      i++;
    } else {
      arr[k] = M[j];
      j++;
    }
    k++;
  }
  
  // When we run out of elements in either L or M,
  // pick up the remaining elements and put in A[p..r]
  while (i < n1) {
    arr[k] = L[i];
    i++;
    k++;
  }
  
  while (j < n2) {
    arr[k] = M[j];
    j++;
    k++;
  }
}

// Divide the array into two subarrays, sort them and merge them
void mergeSort(int arr[], int l, int r) {
  if (l < r) {
    // m is the point where the array is divided into two subarrays
    int m = l + (r - l) / 2;
    
    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);
    // Merge the sorted subarrays
    merge(arr, l, m, r);
  }
}

// Print the array
void printArray(int arr[], int size) {
  for (int i = 0; i < size; i++)
    cout << arr[i] << " ";
  cout << endl;
}

// Driver program
int main() {

    int data[1000] = {45, -12, 9, 0, -100, 87, 23, -34, 56, 8,
                           -89, 67, 12, 43, -1, 92, -5, 37, -16, 74,
                           15, -8, 93, 22, -44, 5, -73, 64, -33, 51,
                           86, -92, 19, 40, 85, -60, 30, -20, 99, -25,
                           70, 11, -49, 62, -71, 34, 90, -12, 55, -4,
                           77, -58, 24, -47, 48, -16, 83, 39, -1, 68,
                           12, 56, 91, -8, 73, -10, 43, -90, 67, 24,
                           -82, 59, -39, 41, 66, -46, 31, 52, -27, 93
                            -12, 9, 0, -100, 87, 23, -34, 56, 8,
                           -89, 67, 12, 43, -1, 92, -5, 37, -16, 74,
                           15, -8, 93, 22, -44, 5, -73, 64, -33, 51,
                           86, -92, 19, 40, 85, -60, 30, -20, 99, -25,
                           70, 11, -49, 62, -71, 34, 90, -12, 55, -4,
                           77, -58, 24, -47, 48, -16, 83, 39, -1, 68,
                           12, 56, 91, -8, 73, -10, 43, -90, 67, 24,
                           -82, 59, -39, 41, 66, -46, 31, 52, -27, 93
                            -12, 9, 0, -100, 87, 23, -34, 56, 8,
                           -89, 67, 12, 43, -1, 92, -5, 37, -16, 74,
                           15, -8, 93, 22, -44, 5, -73, 64, -33, 51,
                           86, -92, 19, 40, 85, -60, 30, -20, 99, -25,
                           70, 11, -49, 62, -71, 34, 90, -12, 55, -4,
                           77, -58, 24, -47, 48, -16, 83, 39, -1, 68,
                           12, 56, 91, -8, 73, -10, 43, -90, 67, 24,
                           -82, 59, -39, 41, 66, -46, 31, 52, -27, 93
                            -12, 9, 0, -100, 87, 23, -34, 56, 8,
                           -89, 67, 12, 43, -1, 92, -5, 37, -16, 74,
                           15, -8, 93, 22, -44, 5, -73, 64, -33, 51,
                           86, -92, 19, 40, 85, -60, 30, -20, 99, -25,
                           70, 11, -49, 62, -71, 34, 90, -12, 55, -4,
                           77, -58, 24, -47, 48, -16, 83, 39, -1, 68,
                           12, 56, 91, -8, 73, -10, 43, -90, 67, 24,
                           -82, 59, -39, 41, 66, -46, 31, 52, -27, 93
                            -12, 9, 0, -100, 87, 23, -34, 56, 8,
                           -89, 67, 12, 43, -1, 92, -5, 37, -16, 74,
                           15, -8, 93, 22, -44, 5, -73, 64, -33, 51,
                           86, -92, 19, 40, 85, -60, 30, -20, 99, -25,
                           70, 11, -49, 62, -71, 34, 90, -12, 55, -4,
                           77, -58, 24, -47, 48, -16, 83, 39, -1, 68,
                           12, 56, 91, -8, 73, -10, 43, -90, 67, 24,
                           -82, 59, -39, 41, 66, -46, 31, 52, -27, 93
                            -12, 9, 0, -100, 87, 23, -34, 56, 8,
                           -89, 67, 12, 43, -1, 92, -5, 37, -16, 74,
                           15, -8, 93, 22, -44, 5, -73, 64, -33, 51,
                           86, -92, 19, 40, 85, -60, 30, -20, 99, -25,
                           70, 11, -49, 62, -71, 34, 90, -12, 55, -4,
                           77, -58, 24, -47, 48, -16, 83, 39, -1, 68,
                           12, 56, 91, -8, 73, -10, 43, -90, 67, 24,
                           -82, 59, -39, 41, 66, -46, 31, 52, -27, 93
                            -12, 9, 0, -100, 87, 23, -34, 56, 8,
                           -89, 67, 12, 43, -1, 92, -5, 37, -16, 74,
                           15, -8, 93, 22, -44, 5, -73, 64, -33, 51,
                           86, -92, 19, 40, 85, -60, 30, -20, 99, -25,
                           70, 11, -49, 62, -71, 34, 90, -12, 55, -4,
                           77, -58, 24, -47, 48, -16, 83, 39, -1, 68,
                           12, 56, 91, -8, 73, -10, 43, -90, 67, 24,
                           -82, 59, -39, 41, 66, -46, 31, 52, -27, 93
                            -12, 9, 0, -100, 87, 23, -34, 56, 8,
                           -89, 67, 12, 43, -1, 92, -5, 37, -16, 74,
                           15, -8, 93, 22, -44, 5, -73, 64, -33, 51,
                           86, -92, 19, 40, 85, -60, 30, -20, 99, -25,
                           70, 11, -49, 62, -71, 34, 90, -12, 55, -4,
                           77, -58, 24, -47, 48, -16, 83, 39, -1, 68,
                           12, 56, 91, -8, 73, -10, 43, -90, 67, 24,
                           -82, 59, -39, 41, 66, -46, 31, 52, -27, 93
                            -12, 9, 0, -100, 87, 23, -34, 56, 8,
                           -89, 67, 12, 43, -1, 92, -5, 37, -16, 74,
                           15, -8, 93, 22, -44, 5, -73, 64, -33, 51,
                           86, -92, 19, 40, 85, -60, 30, -20, 99, -25,
                           70, 11, -49, 62, -71, 34, 90, -12, 55, -4,
                           77, -58, 24, -47, 48, -16, 83, 39, -1, 68,
                           12, 56, 91, -8, 73, -10, 43, -90, 67, 24,
                           -82, 59, -39, 41, 66, -46, 31, 52, -27, 93
                            -12, 9, 0, -100, 87, 23, -34, 56, 8,
                           -89, 67, 12, 43, -1, 92, -5, 37, -16, 74,
                           15, -8, 93, 22, -44, 5, -73, 64, -33, 51,
                           86, -92, 19, 40, 85, -60, 30, -20, 99, -25,
                           70, 11, -49, 62, -71, 34, 90, -12, 55, -4,
                           77, -58, 24, -47, 48, -16, 83, 39, -1, 68,
                           12, 56, 91, -8, 73, -10, 43, -90, 67, 24,
                           -82, 59, -39, 41, 66, -46, 31, 52, -27, 93
                            -12, 9, 0, -100, 87, 23, -34, 56, 8,
                           -89, 67, 12, 43, -1, 92, -5, 37, -16, 74,
                           15, -8, 93, 22, -44, 5, -73, 64, -33, 51,
                           86, -92, 19, 40, 85, -60, 30, -20, 99, -25,
                           70, 11, -49, 62, -71, 34, 90, -12, 55, -4,
                           77, -58, 24, -47, 48, -16, 83, 39, -1, 68,
                           12, 56, 91, -8, 73, -10, 43, -90, 67, 24,
                           -82, 59, -39, 41, 66, -46, 31, 52, -27, 93};

  auto start = high_resolution_clock::now();
  int size = sizeof(data) / sizeof(data[0]);
  mergeSort(data, 0, size - 1);
  auto stop = high_resolution_clock::now();
  auto duration = duration_cast<microseconds>(stop - start);
  cout << "Tiempo de ejecución: " << duration.count() << " microsegundos" << endl;
  cout << "Sorted array: \n";
  printArray(data, size);
  return 0;
}
